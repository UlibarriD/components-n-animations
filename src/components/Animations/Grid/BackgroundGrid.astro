---

---

<script>
  // Define an interface for the Cell element
  interface CellElement extends HTMLElement {}

  let numCells: number = 0; // Track the number of cells created
  // Function to create cells
  function createCells(): void {
    // Calculate the number of cells based on the window's width and height
    const newNumCells: number =
      Math.floor(window.innerWidth / 30) * Math.floor(window.innerHeight / 29);

    // Get the container for cells
    const container: HTMLElement | null =
      document.querySelector(".background-grid");

    // Check if the container exists
    if (container) {
      // If the new number of cells is greater than the previous one, add the additional cells
      if (newNumCells > numCells) {
        // Create and append cells to the container
        for (let i = numCells; i < newNumCells; i++) {
          const cell: CellElement = document.createElement(
            "cell"
          ) as CellElement;
          container.appendChild(cell);
        }
        numCells = newNumCells;

        // Select all cells and apply random colors on hover
        const cells = document.querySelectorAll<CellElement>("cell");
        cells.forEach(function (cell) {
          cell.addEventListener("mouseover", function () {
            cell.style.backgroundColor = getRandomColor();
          });
          cell.addEventListener("mouseout", function () {
            cell.style.backgroundColor = "";
          });
        });
      }
    }
  }

  // Array of three colors
  const colors: string[] = ["#7fc6a4", "#5d737e", "#FAF33E"];

  // Function to generate a random number within a range
  function getRandomNumber(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  // Function to randomly choose a color from the array
  function getRandomColor(): string {
    return colors[getRandomNumber(0, colors.length - 1)];
  }

  // Call the function when the window loads and when it resizes
  window.onload = window.onresize = createCells;
</script>

<div class="background-grid"></div>

<style>
  .background-grid {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-wrap: wrap;
    align-content: flex-start;
    overflow-y: hidden;
  }
  .background-grid :global(cell) {
    aspect-ratio: 1;
    width: 30px;
    flex-grow: 1;
    border: 1px solid rgba(245, 245, 245, 0.5);
    transition: 1.25s ease-out;
  }
  .background-grid :global(cell:hover) {
    background-color: srgb(0.07, 0.44, 0.94);
    transition: 0s linear;
  }
</style>
